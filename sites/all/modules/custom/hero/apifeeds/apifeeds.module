<?php
/**
 *	apifeeds.module
 *	Created by: mandelbro
 *		Module for all user account functionality (create, delete, update, add/modify community memberships).
 *		Communitieis themselves are governed in a separate module.
 */
/**
 * Implementation of hook_init().
 */
function apifeeds_init() {

	// get include files
	_include_folder(_get_module_dir('apifeeds') .'/include');
}

/**
 *  Implementation of hook_permission
 */
function apifeeds_permission() {
}

/**
 *  Implementation of hook_menu
 */
function apifeeds_menu() {

	$items = array();

  $items['apifeeds/feeds'] = array(
    'title' => 'Twitter API',
    'page callback' => 'apifeeds_js_router',
    'description' => 'Provides a PHP call to the Twitter API.',
    'access callback' => TRUE,
    'type'	=> MENU_CALLBACK,
  );

	return $items;

}

/**
 *  Implementation of hook_theme()
 */
function apifeeds_theme() {
  return array(
    'apifeeds_wordpress_msb' => array(
    	'template' => 'templates/wordpress-msb',
    	'variables' => array(
    		'username' => NULL,
    		'limit' => 5,
    		'recache' => FALSE,
    	),
    ),
    'apifeeds_zendesk' => array(
    	'template' => 'templates/zendesk',
    	'variables' => array(
    		'display' => NULL,
    		'limit' => 5,
    		'recache' => FALSE,
    	),
    ),
  );
}

function apifeeds_feed_info() {
	return array(
		'zendesk' => array(
			'username' => '',
			'limit' => 10,
		),
		'wordpress_msb' => array(
			'limit' => 3,
		),
	);
}

/**
 * hook_menu callback
 */
function apifeeds_js_router() {

	// GET must be set, the feedtype variable must be set, the feedtype string must be a registered theme
	if(!isset($_GET) || !isset($_GET['feedtype']) || !in_array('apifeeds_'. $_GET['feedtype'], array_keys(apifeeds_theme()))) {
		return drupal_not_found();
	}


	$feedtype = $_GET['feedtype'];
	$feed_info = apifeeds_feed_info();
	$content = array(
		'#markup' => theme('apifeeds_'. $feedtype, $feed_info[$feedtype] + array('recache' => TRUE)),
	);

	return $content;

}

/**
 * apifeeds_load_items
 * Retrieves an array of spotify track data from the
 * Drupal cache
 */
function apifeeds_load_items($feedtype, $username, $count = 3, $recache = FALSE) {
	$content = array();
	// attempt to access spotify in the cache
	$cache_data = cache_get('feed_'. $feedtype .'_items');
	$expire = !empty($cache_data->created) ? $cache_data->created <= (time() - (60 * 60)) : TRUE; // set cache to expire every hour
	// make sure cache data is an object, that the data property is set, and a recache hasn't been requested
	if(!is_object($cache_data) || !$cache_data->data || $recache || $expire) {
		// if not, load the items
		$fn = 'apifeeds_'. $feedtype .'_load';
		$items = $fn($username, $count);
		cache_set('feed_'. $feedtype .'_items', $items);
	}
	else { // retrieve stored data array
		$items = $cache_data->data;
	}

	return $items;

}

function _apifeeds_fetch_url($url){
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_TIMEOUT, 20);

	$retData = curl_exec($ch);
	curl_close($ch);

	return $retData;
}


/**
 * Creates an authenticated http request
 *
 * @return Zend_Http_Client
 */
function _apifeeds_http($url, $username = NULL, $password = NULL){
	// setup the request
	$http = new Zend_Http_Client($url);
	$http->setConfig(array("strict" => false));
	$http->setAuth($username, $password);

	return $http->request("GET");
}