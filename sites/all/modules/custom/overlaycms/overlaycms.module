<?php

/**
 * @file
 * Sample AJAX functionality so people can see some of the CTools AJAX
 * features in use.
 */

// ---------------------------------------------------------------------------
// Drupal hooks.

function overlaycms_init() {

}

/**
 *  Implementation of hook_menu()
 */
function overlaycms_menu() {
  $items['overlaycms'] = array(
      'title' => 'Chaos Tools AJAX Demo',
      'page callback' => 'overlaycms_page',
      'page arguments' => array('sample.page'),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );
  $items['overlaycms/simple_form'] = array(
    'title' => 'Simple Form',
    'page callback' => 'ctools_ajax_simple_form',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['overlaycms/%ctools_js/hello'] = array(
      'title' => 'Hello World',
      'page callback' => 'overlaycms_hello',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['overlaycms/%ctools_js/tablenix/%'] = array(
      'title' => 'Hello World',
      'page callback' => 'overlaycms_tablenix',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['overlaycms/%ctools_js/login'] = array(
      'title' => 'Login',
      'page callback' => 'overlaycms_login',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['overlaycms/%ctools_js/animal'] = array(
      'title' => 'Animal',
      'page callback' => 'overlaycms_animal',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['overlaycms/%ctools_js/login/%'] = array(
      'title' => 'Post-Login Action',
      'page callback' => 'overlaycms_login_success',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['overlaycms/jumped'] = array(
    'title' => 'Successful Jumping',
    'page callback' => 'overlaycms_jump_menu_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['overlaycms/%ctools_js/node/edit/%node'] = array(
      'title' => 'Edit Node',
      'page callback' => 'overlaycms_page',
      'page arguments' => array('node.edit', 1, 4),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

function overlaycms_ajax_simple_form() {
  ctools_include('content');
  ctools_include('context');
  $node = node_load(1);
  $context = ctools_context_create('node', $node);
  $context = array('context_node_1' => $context);
  return ctools_content_render('node_comment_form', 'node_comment_form', overlaycms_ajax_simple_form_pane(), array(), array(), $context);
}

function overlaycms_ajax_simple_form_pane() {
  $configuration = array(
    'anon_links' => 0,
    'context' => 'context_node_1',
    'override_title' => 0,
    'override_title_text' => '',
  );
  return $configuration;
}

/**
 * Implementation of hook_theme()
 *
 * Render some basic output for this module.
 */
function overlaycms_theme() {
  return array(
    // Sample theme functions.
    'overlaycms_container' => array(
      'arguments' => array('content' => NULL),
    ),
  );
}

function overlaycms_form_alter(&$form, &$form_state, $form_id) {

	// add the ajax info to the form state
	if(strpos($form_id, 'node_form') > 0) _overlaycms_add_ctools_to_form($form_state);
		
	// determine if there is a restriction on the fields to show
	if(!empty($form_state['fields'])) {
	//	predie($form);
		$fields = $form_state['fields'];
		_overlaycms_process_hidden_fields($form, $fields);
		
	}
	
}

function overlaycms_preprocess_page(&$variables) {
	
	#if(user_access('administer nodes')) {
	
	  // Include the CTools tools that we need.
	  ctools_include('ajax');
	  ctools_include('modal');
	
	  // Add CTools' javascript to the page.
	  ctools_modal_add_js();
	  
	  // add overlay js
	  ctools_add_js('overlay.min', 'overlaycms');
	  ctools_add_css('overlay', 'overlaycms');

	  // Create our own javascript that will be used to theme a modal.
	  $modal_style = array(
	    'overlaycms-style' => array(
	      'modalSize' => array(
	        'type' => 'fixed',
	        'width' => 890,
	        'height' => 540,
	      ),
	      'modalOptions' => array(
	        'opacity' => .2,
	        'background-color' => '#fff',
	      ),
	      'animation' => 'fadeIn',
	      'animationSpeed' => 800,
	      'modalTheme' => 'overlaycmsNodeForm',
	      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'overlaycms'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
	    ),
	  );
	
	  drupal_add_js($modal_style, 'setting');
	  
  #}
  
}

// ---------------------------------------------------------------------------
// Page callbacks

/**
 * Page callback to display links and render a container for AJAX stuff.
 */
function overlaycms_page($section, $js = FALSE, $node = NULL) {
  global $user;
  
  $content = array();
  
	// include the section file
	module_load_include('inc', 'overlaycms', 'overlaycms.'. $section);
	
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  
  switch ($section) {
  	case 'node.edit' :
  		// include node pages file
		  ctools_include('node.pages', 'node', '');
		  
		  // determine the fields to display
		  $fields = !empty($_GET['fields']) ? explode(',', $_GET['fields']) : NULL;
		  $form_state = array(
		    'title' => "Editing {$node->type}: {$node->title}",
		    'ajax'  => TRUE,
		    'build_info' => array(
		      'args'  => array($node),
		    ),
		    'fields' => $fields,
		  );
		  
  	  $output = ctools_modal_form_wrapper($node->type . '_node_form', $form_state);
  		// print array('test test');
		  print ajax_render($output);
  		exit;
  		break;
  	default :
	  
	    // Create our own javascript that will be used to theme a modal.
	    $sample_style = array(
	      'ctools-sample-style' => array(
	        'modalSize' => array(
	          'type' => 'fixed',
	          'width' => 500,
	          'height' => 300,
	          'addWidth' => 20,
	          'addHeight' => 15,
	        ),
	        'modalOptions' => array(
	          'opacity' => .5,
	          'background-color' => '#000',
	        ),
	        'animation' => 'fadeIn',
	        'modalTheme' => 'overlaycmsNodeForm',
	        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'overlaycms'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
	      ),
	    );
	  
	    drupal_add_js($sample_style, 'setting');
		  
	    // Since we have our js, css and images in well-known named directories,
	    // CTools makes it easy for us to just use them without worrying about
	    // using drupal_get_path() and all that ugliness.
	    ctools_add_js('overlay-sample', 'overlaycms');
	    ctools_add_css('overlay-sample', 'overlaycms');
	  
	    // Create a list of clickable links.
	    $links = array();
	  
	    // Only show login links to the anonymous user.
	    if ($user->uid == 0) {
	      $links[] = ctools_modal_text_button(t('Modal Login (default style)'), 'overlaycms/nojs/login', t('Login via modal'));
	  
	      // The extra class points to the info in ctools-sample-style which we added
	      // to the settings, prefixed with 'ctools-modal'.
	      $links[] = ctools_modal_text_button(t('Modal Login (custom style)'), 'overlaycms/nojs/login', t('Login via modal'),  'ctools-modal-ctools-sample-style');
	    }
	  
	    // Four ways to do our animal picking wizard.
	    $button_form = ctools_sample_ajax_button_form();
	    $links[] = l(t('Wizard (no modal)'), 'overlaycms/nojs/animal');
	    $links[] = ctools_modal_text_button(t('Wizard (default modal)'), 'overlaycms/nojs/animal', t('Pick an animal'));
	    $links[] = ctools_modal_text_button(t('Wizard (custom modal)'), 'overlaycms/nojs/animal', t('Pick an animal'),  'ctools-modal-ctools-sample-style');
	    $links[] = drupal_render($button_form);
	  
	    $links[] = ctools_ajax_text_button(t('Hello world!'), "overlaycms/nojs/hello", t('Replace text with "hello world"'));
	  
	    $output = theme('item_list', array('items' => $links, 'title' => t('Actions')));
	  
	    // This container will have data AJAXed into it.
	    $output .= theme('overlaycms_container', array('content' => '<h1>' . t('Sample Content') . '</h1>'));
	  
	    // Create a table that we can have data removed from via AJAX.
	    $header = array(t('Row'), t('Content'), t('Actions'));
	    $rows = array();
	    for($i = 1; $i < 11; $i++) {
	      $rows[] = array(
	        'class' => array('ajax-sample-row-'. $i),
	        'data' => array(
	          $i,
	          md5($i),
	          ctools_ajax_text_button("remove", "overlaycms/nojs/tablenix/$i", t('Delete this row')),
	        ),
	      );
	    }
	  
	    $output .= theme('table', array('header' => $header, 'rows' => $rows, array('class' => array('ajax-sample-table'))));
	  
	    // Show examples of ctools javascript widgets
	    $output .= '<h2>'. t('CTools Javascript Widgets') .'</h2>';
	  
	    // Create a drop down menu
	    $links = array();
	    $links[] = array('title' => t('Link 1'), 'href' => $_GET['q']);
	    $links[] = array('title' => t('Link 2'), 'href' => $_GET['q']);
	    $links[] = array('title' => t('Link 3'), 'href' => $_GET['q']);
	  
	    $output .= '<h3>' . t('Drop Down Menu') . '</h3>';
	    $output .= theme('ctools_dropdown', array('title' => t('Click to Drop Down'), 'links' => $links));
	  
	    // Create a collapsible div
	    $handle = t('Click to Collapse');
	    $content = 'Nulla ligula ante, aliquam at adipiscing egestas, varius vel arcu. Etiam laoreet elementum mi vel consequat. Etiam scelerisque lorem vel neque consequat quis bibendum libero congue. Nulla facilisi. Mauris a elit a leo feugiat porta. Phasellus placerat cursus est vitae elementum.';
	    $output .= '<h3>'. t('Collapsible Div') .'</h3>';
	    $output .= theme('ctools_collapsible', array('handle' => $handle, 'content' => $content, 'collapsed' => FALSE));
	  
	    // Create a jump menu
	    ctools_include('jump-menu');
	    $form = drupal_get_form('overlaycms_jump_menu_form');
	    $output .= '<h3>'. t('Jump Menu') .'</h3>';
	    $output .= drupal_render($form);
	  
	    return array('markup' => array('#markup' => $output));
  }
}

// ---------------------------------------------------------------------------
// Themes

/**
 * Theme function for main rendered output.
 */
function theme_overlaycms_container($vars) {
  $output = '<div id="ctools-sample">';
  $output .= $vars['content'];
  $output .= '</div>';

  return $output;
}

// ---------------------------------------------------------------------------
// Stuff needed for our little wizard.


// ---------------------------------------------------------------------------
// Wizard caching helpers.

/**
 * Store our little cache so that we can retain data from form to form.
 */
function overlaycms_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('overlaycms', $id, $object);
}

/**
 * Get the current object from the cache, or default.
 */
function overlaycms_cache_get($id) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('overlaycms', $id);
  if (!$object) {
    // Create a default object.
    $object = new stdClass;
    $object->type = 'unknown';
    $object->name = '';
  }

  return $object;
}

/**
 * Clear the wizard cache.
 */
function overlaycms_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('overlaycms', $id);
}

function _overlaycms_add_ctools_to_form(&$form_state) {

	if(arg(0) !== 'overlaycms') return;
	
	$form_state += array(
	  'ajax' => ctools_js_load(arg(1)),
	);

}

/**
 * _overlaycms_process_hidden_fields
 * Adds a hidden wrapper around all fields that are not 
 * specified to show
 */
function _overlaycms_process_hidden_fields(&$form, $fields) {
	$protected_types = array('actions', 'submit', 'value', 'managed_file', 'form', 'token', 'weight');
	$hidden_types = array('fieldset', 'container', 'vertical_tabs', 'checkboxes', 'radios');
	// loop through the form's field => settings pairs
	foreach($form as $field => &$settings) {
		// if $settings is not an array, skip
		if(!is_array($settings) || strpos($field, '#') === 0) continue;
		// need to do the double check here because an empty string will cause in_array to return true
		if($field && in_array($field, $fields)) continue;
		// if it's a string and on the list, skip
		if(isset($settings['#type']) && in_array($settings['#type'], $hidden_types)) {
			$settings['#prefix'] = '<div style="display:none;">';
			$settings['#suffix'] = '</div>';
			continue;
		}
		// if this field array is not empty and doesn't have a #type 
		if(!empty($settings)) _overlaycms_process_hidden_fields($settings, $fields);
		// more fine tooth checking of the type attribute
		if(!isset($settings['#type']) || in_array($settings['#type'], $protected_types)) continue;
		// convert the field type into a hidden
		$settings['#type'] = 'hidden';
		$settings['#default_value'] = !isset($settings['#default_value']) ? NULL : $settings['#default_value'];
		// prefer the default value if it's present
		$settings['#value'] = !empty($settings['#value']) ? $settings['#value'] : $settings['#default_value'];
	}

}
