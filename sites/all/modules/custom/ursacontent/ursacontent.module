<?php
/**
 *  UrsaContent - Custom content type manager for Polaris
 *  Created by: mandelbro
 */

_include_folder(_get_module_dir('ursacontent') .'/include');

/**
 *  Implementation of hook_init
 */
function ursacontent_init() {

}

/**
 *  Implementation of hook_permission
 */
function ursacontent_permission() {
  return array(
    'create content' => array(
      'title' => 'Create custom content',
    ),
    'delete own content'  => array(
      'title' => 'Delete content you created',
    ),
    'delete any content' => array(
      'title' => 'Delete any content item',
    ),
    'edit own content'  => array(
      'title' => 'Edit content you created',
    ),
    'edit any content'  => array(
      'title' => 'Edit any content item',
    ),
  );
}

/**
 *  Implementation of hook_theme()
 */
function ursacontent_theme() {
  return array(
    'ursacontent_node_list' => array(
    	'variables' => array(
    		'type' => 'page',
    		'view_mode' => NULL,
    		'conditions' => array(),
    		'field_conditions' => NULL,
    		'reset' => FALSE,
    		'range' => NULL,
    		'order' => NULL,
    	),
    ),
    'ursacontent_no_content' => array(
    	'template' => 'templates/no-content',
    	'variables' => array(
    		'type' => NULL,
    	),
    ),
    'ursacontent_page_slideshow' => array(
    	'template' => 'templates/page-slideshow',
    	'variables' => array(
    		'node' => NULL,
    		'langcode' => NULL,
    	),
    ),
    'ursacontent_case_study_financials' => array(
    	'template' => 'templates/case-study-financials',
    ),
    'ursacontent_case_study_information_technology' => array(
    	'template' => 'templates/case-study-information-technology',
    ),
    'ursacontent_case_study_pharmaceuticals' => array(
    	'template' => 'templates/case-study-pharmaceuticals',
    ),
    'ursacontent_case_study_industrials' => array(
    	'template' => 'templates/case-study-industrials',
    ),
  );
}

/**
 *  Implementation of hook_menu
 */
function ursacontent_menu() {
  $items = array();
  $description = 'Latest news and events for Polaris.';
  $items['company/news-and-events'] = array(
    'title' 					=> 'News & Events',
    'description' 		=> $description,
    'page callback' 	=> 'ursacontent_node_list_router',
    'page arguments' 	=> array('news', 'teaser', $description),
    'access callback' => TRUE,
    'type' 						=> MENU_SUGGESTED_ITEM,
    'menu_name' 			=> 'main-menu',
  );

  $description = 'Want to join our team? Come work with Polaris!';
  $items['company/careers'] = array(
    'title' 					=> 'Careers',
    'description' 		=> $description,
    'page callback' 	=> 'ursacontent_node_list_router',
    'page arguments' 	=> array('career', 'full', $description),
    'access callback' => TRUE,
    'type' 						=> MENU_SUGGESTED_ITEM,
    'menu_name' 			=> 'main-menu',
  );

  $items['case-studies/%'] = array(
    'title' 					=> 'Case Study',
    'page callback' 	=> 'ursacontent_case_study_router',
    'page arguments' 	=> array(1),
    'access callback' => TRUE,
    'type' 						=> MENU_SUGGESTED_ITEM,
    'menu_name' 			=> 'main-menu',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter.
 */
function ursacontent_menu_alter(&$items) {
	// redirect all nodes to their url alii
	$items['node/%node']['page callback'] = 'ursacontent_path_redirect';
}


/**
 * Implementation of hook_menu_alter.
 */
function ursacontent_path_redirect($node) {
	// setup the redirect array, node type => redirect path
	$redirect = array(
		'event' => 'company/news-and-events',
		'career' => 'company/careers',
		'location' => 'contact',
		'teammate' => 'company',
		'testimonial' => 'case-studies',
		'slideshow' => '',
	);

	// check if the node type is redirected
	if(in_array($node->type, array_keys($redirect))) {
		drupal_goto($redirect[$node->type]);
	}
	else {
		return node_page_view($node);
	}
}

/**
 * theme_ursacontent_node_list()
 * Theme function for ursacontent_node_list theme
 */
function theme_ursacontent_node_list(&$variables) {
	$type = node_type_load($variables['type']);
	// combine conditions, should only have type
	$conditions = array('type' => $type->type, 'status' => 1) + $variables['conditions'];
	// create a new instance of EntityFieldQuery
	$query = new EntityFieldQuery();
	// only get nodes
	$query->entityCondition('entity_type', 'node');
	// apply all conditions
	if($conditions) {
		foreach($conditions as $condition => $value) {
			$query->propertyCondition($condition, (is_array($value) ? $value['value'] : $value), (is_array($value) ? $value['operator'] : '='));
		}
	}
	// apply all field conditions
	if(isset($variables['field_conditions'])) {
		foreach($variables['field_conditions'] as $field => $condition) {
			$query->fieldCondition($field, $condition['key'], $condition['value'], (isset($condition['operator']) ? $condition['operator'] : '='));
		}
	}
	// apply range
	if(is_array($variables['range'])) {
		$query->range(isset($variables['range']['start']) ? $variables['range']['start'] : 0, $variables['range']['end'] );
	}
	// apply order
	if($variables['order']) {
		$query->propertyOrderBy($variables['order']);
	}

	$result = $query->execute();

	if (isset($result['node'])) { // list the nodes
		$nodes = node_load_multiple(array_keys($result['node']));
		return array(
			'#prefix' => !isset($variables['no_title']) ? '<div class="node-list-name">'. _plurlify($type->name) .'</div>' : NULL,
			'node_list' => node_view_multiple($nodes, $variables['view_mode']),
		);
	}
	else {
		return array(
			'#prefix' => '<div class="node-list-name">'. _plurlify($type->name) .'</div>',
			'#markup' => theme('ursacontent_no_content', array('type' => $type)),
		);
	}
}

/**
 * template preprocess function for the ursacontent_no_content theme
 */
function template_preprocess_ursacontent_no_content(&$variables) {

	$variables['type_name'] = $variables['type']->name;

}

/**
 * ursacontent_node_list_router()
 * hook_menu router callback function for ursacontent node listing pages
 *
 * @param $type
 *		The node type to pull
 */
function ursacontent_node_list_router($type, $view_mode, $description) {
	$content = array();

	$content['content_top']['header'] = array(
		'#prefix' => '<div class="node-list-header">',
		'#suffix' => '</div>',
	);

	$content['content_top']['header']['main'] = array(
		'#markup' => '<h1 class="node-list-header-text">'. drupal_get_title() .'</h1>',
	);

	$content['content_top']['header']['sub'] = array(
		'#markup' => '<h2 class="node-list-header-subtext">'. $description .'</h2>',
	);

	// load the nodes by type
	$content['list'] = array(
		'#prefix' => "<div class='{$type}-node-list-page'>",
		'#suffix' => "</div>",
		'nodes' => theme('ursacontent_node_list', array('type' => $type, 'view_mode' => $view_mode)),
	);

	return $content;
}

/**
 * ursacontent_case_study_router()
 * menu callback router for case study pages
 */
function ursacontent_case_study_router($name) {
	$content = array();
	$allowed = array('financials' => 'Financials', 'information-technology' => 'Information Technology', 'pharmaceuticals' => 'Pharmaceuticals', 'industrials' => 'Industrials');

	if(!in_array($name, array_keys($allowed))) return drupal_not_found();

	// set the page title
	drupal_set_title($allowed[$name]);

	// return the theme
	$content['main'] = array(
		'#markup' => theme('ursacontent_case_study_'. str_replace('-', '_', $name)),
	);

	return $content;

}

/**
 *  Implementation of hook_node_info
 *    Define custom node type 'page'
 */
function ursacontent_node_info() {
  return array(
    'page' => array(
      'name'          => t('Page'),
      'base'          => 'node_content',
      'description'   => t('Basic page templates with wide and narrow columns, use with blocks to add extra awesomeness.'),
      'has_title'     => TRUE,
      'title_label'   => t('Page Title'),
    ),
  );
}

/**
 *  Implementation of hook_node_type_insert
 *    Add fields to custom node types
 */
function ursacontent_node_type_insert($info) {
	ursacontent_node_type_update($info);
}

/**
 *  Implementation of hook_node_type_update
 *    Add fields to custom node types
 */
function ursacontent_node_type_update($info) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $info->type .'_node_type_update';
	if(function_exists($fn)) {
		$fn($info);
	}
}

/**
 *  Implementation of hook_node_insert
 *    Callback for insertion of an ursacontent node
 */
function ursacontent_node_insert($node) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $node->type .'_node_insert';
	if(function_exists($fn)) {
		$fn($node);
	}

}

/**
 *  Implementation of hook_node_update
 *    Callback for update of an ursacontent node
 */
function ursacontent_node_update($node) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $node->type .'_node_update';
	if(function_exists($fn)) {
		$fn($node);
	}

}

/**
 *  Implementation of hook_node_delete
 *    Callback for deletion of an ursacontent node
 */
function ursacontent_node_delete($node) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $node->type .'_node_delete';
	if(function_exists($fn)) {
		$fn($node);
	}

}

/**
 *  Implementation of hook_node_load
 *    Callback for loading of an ursacontent node
 */
function ursacontent_node_load($nodes, $types) {

	foreach($nodes as $nid => $node) {
		// check if a function exists in the ursacontent namespace for the type
		$fn = 'ursacontent_'. $node->type .'_node_load';
		if(function_exists($fn)) {
			$fn($node);
		}
	}

}

/**
 *  Implementation of hook_node_view
 *    Handles pre-view rendering for ursacontent node types
 */
function ursacontent_node_view($node, $view_mode, $langcode) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $node->type .'_node_view';
	if(function_exists($fn)) {
		$fn($node, $view_mode, $langcode);
	}

}

function ursacontent_preprocess_node(&$variables) {

	// check if a function exists in the ursacontent namespace for the type
	$fn = 'ursacontent_'. $variables['type'] .'_preprocess_node';
	if(function_exists($fn)) {
		$fn($variables);
	}
}

/**
 * _ursacontent_get_field_values
 * A convenience method which simplifies the values from field arrays,
 * the original field values are stored in a new array [field_content]
 *
 * This processing occurs just before render so there shouldn't be any issues
 * effecting later proccessing caused by changing the fields
 *
 * @param $node
 * 	The node the get values for
 * @param $fields
 *  Array of fields to retrieve
 * @param $langcode
 * 	The language of the field to return
 */
function _ursacontent_get_field_values(&$node, $fields, $langcode = NULL) {
	global $language;
	if(!empty($node->field_content)) return; // already ran this function on this node, bail
	$langcode = !$langcode ? 'und' : $langcode;
	// setup the field_content array to store the old values
	$node->field_content = array();
	if(!$fields) return;
	foreach($fields as $field) {
		// get the field value for the given language
		$field_value = field_get_items('node', $node, $field, $langcode);
		// store the old field
		$node->field_content[$field] = $node->$field;
		// make sure und isn't involved
		if(isset($field_value['und'])) $field_value = $field_value['und'];
		// simplify the new node structure
		if(count($field_value) == 1) { // only one value present, just set the field value
			// for most field values, the [value] key will be set, otherwise just include the entire value array
			$node->$field = isset($field_value[0]['value']) ? $field_value[0]['value'] : $field_value[0];
		}
		else {
			$node->$field = array();
			foreach($field_value as $key => $item) { // multivalues are present, send back an array with each value numerically keyed
				// for most field values, the [value] key will be set, otherwise just include the entire value array
				$node->$field += isset($item['value']) ? array($key => $item['value']) : array($key => $item);
			}
		}
	}
}

/**
 * _ursacontent_get_options
 * get options from the options module
 * @param $field
 *		I'll need the field you're after, and it should probably be
 * 		a list_xxx field type
 */
function _ursacontent_get_options($field) {
	return _options_get_options(field_info_field($field), NULL, NULL, NULL, NULL);
}